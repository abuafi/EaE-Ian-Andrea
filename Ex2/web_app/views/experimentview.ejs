<link href="stylesheets/style.css" rel="stylesheet" />
<link href="stylesheets/exp_style.css" rel="stylesheet" />
<body>
    
    <div id="desc" class="description">
        <h3>Instructions</h3>
        <p>
            In this experiment you will see a sequence of words on the screen. 
            Then, when you click Start, 4 different spellings of that sequence will appear in either camel case or kebab case.
        </p>
        <p>
            Your goal is to click on the correct spelling as quickly as possible.
        </p>
        <p>
            Before you begin the experiment, you can see how it works by trying it in a test environment by clicking on "Test Experiment".
            When you're ready, click on "Start Experiment" to begin.
        </p>
        <div class="buttonRow">
            <div class="buttonRowW"><button id="startExperimentButton" class="fancybtn" onclick="start()">
                Start Experiment
            </button></div>
            <div class="buttonRowW"><button id="testExperimentButton" class="fancybtn" onclick="test()">
                Test Experiment
            </button></div>
        </div>
    </div>


    

    <div id="experiment" style="display:none;">
       
        <h1 id="wordsTitle" class="mono"></h1>
        <div id="buttonBox" style="display:none;" class="buttonRow mono mup">
            <button class="option" id="option1" onclick="clickOption(0)"></button>
            <button class="option" id="option2" onclick="clickOption(1)"></button>
            <button class="option" id="option3" onclick="clickOption(2)"></button>
            <button class="option" id="option4" onclick="clickOption(3)"></button>
        </div>
        <div class="buttonRow mup">
            <button id="startButton" class="option" onclick="show()">
                Start
            </button>
        </div>
        
    </div>
</body>

<script>
    var testing = 0
    var uid
    var index;
    var wordArray;
    var startTime;
    var correctIndex;
    var indexSet;
    var caseSet;
    var params;
    var startButton = document.getElementById("startButton")
    var wordsTitle = document.getElementById("wordsTitle")
    var buttonBox = document.getElementById("buttonBox")
    var divDesc = document.getElementById("desc")
    var divExp = document.getElementById("experiment")
    var testCases = [
        {0:"1", 1:"2", case:"camelcase", words:["hello world","helli world","hello woord","hello words"]}
    ]
    var options = [
        document.getElementById("option1"),
        document.getElementById("option2"),
        document.getElementById("option3"),
        document.getElementById("option4"),
    ]
    function kebabcase(w) {
        let words = w.split(" ")
        first = words[0]
        s = first
        for(w of words.slice(1)) {
            s += "-" + w
        }
        return s
    }
    function camelcase(w) {
        let words = w.split(" ")
        first = words[0]
        return first + words.slice(1).map(a => a[0].toUpperCase() + a.substring(1)).join("")
    }
    function normalCase(w) {
        let words = w.split(" ")
        return words.map(a => a[0].toUpperCase() + a.substring(1)).join(" ")
    }
    var style = camelcase
    function end() {
        if (testing) {
            divExp.style.display = "none"
            divDesc.style.display = "flex"
            localStorage.setItem("started", 0)
            index=0
            testing=0
        } else {
            //todo remove these lines
            if (params.get('dev')) {
                localStorage.setItem("i", 0)
                localStorage.setItem("started", 0)
            } else {
                localStorage.setItem("finished", 1)
            }
            fetch('/data', {method:"PATCH", body:JSON.stringify({is:indexSet, cs:caseSet, data:localStorage.getItem("final")})})
            localStorage.removeItem("final")
            window.location.href = "/done"
        }
    }
    async function fetchWordSet() {
        let json
        if (testing) {
            json = testCases[index]
            if (json == undefined) {
                end()
                return
            }
        } else {
            let res = await fetch(`/words?i=${index}&is=${indexSet}&cs=${caseSet}`)
            if (res.ok) {
                json = await res.json()
            } else {
                end()
                return
            }
        }
        wordArray = json["words"]
        correctIndex = parseInt(json["index"])
        style = window[json["case"]]
        index++;
    }
    function showCorrect() {
        buttonBox.style.display = "none"
        wordsTitle.textContent = normalCase(wordArray[0])
    }
    function showOptions() {
        buttonBox.style.display = "flex"
        ws = wordArray.slice(1)
        ws.splice(correctIndex, 0, wordArray[0])
        i = 0
        for (option of options) {
            option.textContent = style(ws[i++])
        }
    }
    function clickOption(i) {
        let final = localStorage.getItem("final")
        if (!testing) {
            final = JSON.parse(final) || []
            final.push(
                {
                    "uid": uid,
                    "correct": i == correctIndex, 
                    "time": window.performance.now() - startTime, 
                    "style": style.name, 
                    "correctI": correctIndex,
                    "correctS": wordArray[0],
                    "device": localStorage.getItem("device"),
                    "csexp": localStorage.getItem("csexp")
                })
            localStorage.setItem("final", JSON.stringify(final))
        }
        localStorage.setItem("i", index)
        run()
    }
    function show() {
        startTime = window.performance.now()
        startButton.style.display = "none"
        showOptions()
    }
    async function run() {
        buttonBox.style.display = "none"
        startButton.style.display = "block"
        await fetchWordSet()
        showCorrect()
    }
    function start() {
        localStorage.setItem("started", 1)
        divExp.style.display = "flex"
        divDesc.style.display = "none"
        run()
    }
    function test() {
        index=0
        divExp.style.display = "flex"
        divDesc.style.display = "none"
        testing=1
        run()
    }
    window.onload = async () => {
        if (localStorage.getItem("finished")) {
            window.location.href = '/done'
            return
        }
        uid = parseInt(localStorage.getItem("uid"))
        if (!uid) {
            res = await fetch('/uid')
            uid = await res.json()
        }
        localStorage.setItem("uid", uid)

        index = localStorage.getItem("i") || 0
        params = new URLSearchParams(window.location.search)
        indexSet = localStorage.getItem("is") || '<%= is %>'
        caseSet = localStorage.getItem("cs") || '<%= cs %>'
        localStorage.setItem("is", indexSet)
        localStorage.setItem("cs", caseSet)
        console.log(caseSet)
        if (parseInt(localStorage.getItem("started"))) {
            start()
        }
    }

</script>